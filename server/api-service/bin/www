#!/usr/bin/env node

require("dotenv").config();

var app = require("../index");
var https = require("https");
var http = require("http");
var fs = require("fs");
var debug = require("debug")("express-app:server");

const appPort = normalizePort(process.env.PORT || 5001);
app.set("port", appPort);

let server;

if (process.env.NODE_ENV == "production") {
  server = http.createServer(app);
} else {
  server = https.createServer(
    {
      key: fs.readFileSync("server.key"),
      cert: fs.readFileSync("server.cert"),
    },
    app
  );
}

server.listen(appPort);

server.on("listening", onListeningApp);
server.on("error", onErrorApp);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onErrorApp(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind =
    typeof appPort === "string" ? "Pipe " + appPort : "Port " + appPort;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListeningApp() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}

process.on("uncaughtException", function (err) {
  console.log(err);
  var stack = err.stack;
  //you can also notify the err/stack to support via email or other APIs
});
